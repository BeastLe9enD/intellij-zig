{
  parserClass='org.ziglang.ZigParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Zig'
  psiImplClassSuffix='Impl'
  psiPackage='org.ziglang.psi'
  psiImplPackage='org.ziglang.psi.impl'

  tokenTypeClass='org.ziglang.ZigTokenType'
  elementTypeHolderClass='org.ziglang.psi.ZigTypes'
  elementTypeClass='org.ziglang.ZigElementType'
}

zigFile ::= topLevelItem* EOF

symbol ::= SYM
string ::= STR
topLevelItem ::= COMPTIME_KEYWORD block | topLevelDecl | testDecl
testDecl ::= TEST_KEYWORD string block
topLevelDecl ::= PUB_KEYWORD? (fnDef | externDecl | globalVarDecl | useDecl)
globalVarDecl ::= EXPORT_KEYWORD? variableDecl SEMICOLON_SYM
localVarDecl ::= COMPTIME_KEYWORD? variableDecl
variableDecl ::=
 (VAR_KEYWORD | CONST_KEYWORD) symbol (COLON_SYM typeExpr)?
 (ALIGN_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (SECTION_KEYWORD LEFT_PAREN expr RIGHT_PAREN)? EQ_SYM expr

containerMember ::= (containerField | fnDef | globalVarDecl)
containerField ::= symbol (COLON_SYM prefixOpExpr (EQ_SYM prefixOpExpr)?)? COMMA_SYM

useDecl ::= USE_KEYWORD expr SEMICOLON_SYM

externDecl ::= EXTERN_KEYWORD string? (fnProto | variableDecl) SEMICOLON_SYM

fnProto ::=
 (
   NAKEDCC_KEYWORD
 | STDCALLCC_KEYWORD
 | EXTERN_KEYWORD
 | (ASYNC_KEYWORD (LEFT_PAREN expr RIGHT_PAREN)?)
 )?
 FN_KEYWORD symbol? paramDeclList (ALIGN_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (SECTION_KEYWORD LEFT_PAREN expr RIGHT_PAREN)? "!"? (typeExpr | VAR_KEYWORD)

fnDef ::= (INLINE_KEYWORD | EXPORT_KEYWORD)? fnProto block

paramDeclList ::= LEFT_PAREN (paramDecl (COMMA_SYM paramDecl)*)? RIGHT_PAREN

paramDecl ::=
 (NOALIAS_KEYWORD | COMPTIME_KEYWORD)?
 (symbol COLON_SYM)?
 (typeExpr | VAR_KEYWORD | RANGE_SYM)

statement ::=
   localVarDecl SEMICOLON_SYM
 | deferBlock
 | deferExpr SEMICOLON_SYM
 | blockExpr(block)
 | expr? SEMICOLON_SYM

private typeExpr ::= errorSetExpr
errorSetExpr ::= (prefixOpExpr "!" prefixOpExpr) | prefixOpExpr

private blockOrExpr ::= block | expr
expr ::= tryExpr | returnExpr | breakExpr | assignExpr | cancelExpr | resumeExpr
block ::= (symbol COLON_SYM)? LEFT_BRACE statement* RIGHT_BRACE

asmExpr ::= ASM_KEYWORD VOLATILE_KEYWORD? LEFT_PAREN string asmOutput? RIGHT_PAREN
asmOutput ::= COLON_SYM (asmOutputItem (COMMA_SYM asmOutputItem)*)? asmInput?
asmInput ::= COLON_SYM (asmInputItem (COMMA_SYM asmInputItem)*)? asmClobbers?
asmOutputItem ::= LEFT_BRACKET symbol RIGHT_BRACKET string LEFT_PAREN (symbol | "->" typeExpr) RIGHT_PAREN
asmInputItem ::= LEFT_BRACKET symbol RIGHT_BRACKET string LEFT_PAREN expr RIGHT_PAREN
asmClobbers ::= COLON_SYM (string (COMMA_SYM string)*)?

unwrapExpr ::= boolOrExpr (unwrapNullable | unwrapError) | boolOrExpr
unwrapNullable ::= "??" expr
unwrapError ::= CATCH_KEYWORD (SEP_SYM symbol SEP_SYM)? expr

assignExpr ::= unwrapExpr assignOperator unwrapExpr | unwrapExpr
assignOperator ::= EQ_SYM | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "*%=" | "+%=" | "-%="

//BlockExpr(body) ::= Block | IfExpr(body) | IfErrorExpr(body) | TestExpr(body) | WhileExpr(body) | ForExpr(body) | switchExpr | CompTimeExpr(body) | SuspendExpr(body)
//Bnf泛型编程(雾
blockExprBlock ::=
   block
 | ifExprBlock
 | ifErrorExprBlock
 | testExprBlock
 | whileExprBlock
 | forExprBlock
 | switchExpr
 | compTimeExprBlock
 | suspendExprBlock

blockExprBlockOrExpr ::=
   block
 | ifExprBlockOrExpr
 | ifErrorExprBlockOrExpr
 | testExprBlockOrExpr
 | whileExprBlockOrExpr
 | forExprBlockOrExpr
 | switchExpr
 | compTimeExprBlockOrExpr
 | suspendExprBlockOrExpr

//CompTimeExpr(body) ::= "comptime" body
compTimeExprBlock ::= COMPTIME_KEYWORD block
compTimeExprBlockOrExpr ::= COMPTIME_KEYWORD blockOrExpr

switchExpr ::= SWITCH_KEYWORD LEFT_PAREN expr RIGHT_PAREN LEFT_BRACE switchProng* RIGHT_BRACE
switchItem ::= expr | (expr RANGE_SYM expr)
switchProng ::=
 (switchItem (COMMA_SYM switchItem) | ELSE_KEYWORD)
 "=>"
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
 expr COMMA_SYM

//ForExpr(body) ::=
// (symbol COLON_SYM)? INLINE_KEYWORD?
// FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
//  option(SEP_SYM STAR_SYM? symbol option(COMMA_SYM symbol) SEP_SYM)
//   body
//  option(ELSE_KEYWORD BlockExpr(body))

forExprBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol (COMMA_SYM symbol)? SEP_SYM)?
   block
  (ELSE_KEYWORD blockExprBlock)?

forExprBlockOrExpr ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol (COMMA_SYM symbol)? SEP_SYM)?
   blockOrExpr
  (ELSE_KEYWORD blockExprBlockOrExpr)?

boolOrExpr ::= boolAndExpr OR_KEYWORD boolOrExpr | boolAndExpr
returnExpr ::= RETURN_KEYWORD expr?
tryExpr ::= TRY_KEYWORD expr
awaitExpr ::= AWAIT_KEYWORD expr
breakExpr ::= BREAK_KEYWORD (COLON_SYM symbol)? expr?
cancelExpr ::= CANCEL_KEYWORD expr
resumeExpr ::= RESUME_KEYWORD expr
deferBlock ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) block
deferExpr ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) expr

//IfExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN body option("else" BlockExpr(body))
ifExprBlock ::= IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN block (ELSE_KEYWORD blockExprBlock)?
ifExprBlockOrExpr ::= IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN blockOrExpr (ELSE_KEYWORD blockExprBlockOrExpr)?

//SuspendExpr(body) ::= "suspend" option((SEP_SYM symbol SEP_SYM body))
suspendExprBlock ::= SUSPEND_KEYWORD (SEP_SYM symbol SEP_SYM block)?
suspendExprBlockOrExpr ::= SUSPEND_KEYWORD (SEP_SYM symbol SEP_SYM blockOrExpr)?

//IfErrorExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) body "else" SEP_SYM symbol SEP_SYM BlockExpr(body)
ifErrorExprBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)? block ELSE_KEYWORD SEP_SYM symbol SEP_SYM blockExprBlock
ifErrorExprBlockOrExpr ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)? blockOrExpr ELSE_KEYWORD SEP_SYM symbol SEP_SYM blockExprBlockOrExpr

//TestExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) body option("else" BlockExpr(body))
testExprBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)? block (ELSE_KEYWORD blockExprBlock)?
testExprBlockOrExpr ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)? blockOrExpr (ELSE_KEYWORD blockExprBlockOrExpr)?

//WhileExpr(body) ::= option(symbol COLON_SYM) option("inline") "while" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) option(COLON_SYM LEFT_PAREN expr RIGHT_PAREN) body option("else" (SEP_SYM symbol SEP_SYM)? BlockExpr(body))
whileExprBlock ::= (symbol COLON_SYM)? INLINE_KEYWORD? WHILE_KEYWORD LEFT_PAREN expr RIGHT_PAREN (SEP_SYM STAR_SYM? symbol SEP_SYM)? (COLON_SYM LEFT_PAREN expr RIGHT_PAREN)? block (ELSE_KEYWORD (SEP_SYM symbol SEP_SYM)? blockExprBlock)?
whileExprBlockOrExpr ::= (symbol COLON_SYM)? INLINE_KEYWORD? WHILE_KEYWORD LEFT_PAREN expr RIGHT_PAREN (SEP_SYM STAR_SYM? symbol SEP_SYM)? (COLON_SYM LEFT_PAREN expr RIGHT_PAREN)? blockOrExpr (ELSE_KEYWORD (SEP_SYM symbol SEP_SYM)? blockExprBlockOrExpr)?

boolAndExpr ::= comparisonExpr AND_KEYWORD boolAndExpr | comparisonExpr
comparisonExpr ::= binaryOrExpr comparisonOperator binaryOrExpr | binaryOrExpr
comparisonOperator ::= "==" | "!=" | "<" | ">" | "<=" | ">="
binaryOrExpr ::= binaryXorExpr SEP_SYM binaryOrExpr | binaryXorExpr
binaryXorExpr ::= binaryAndExpr "^" binaryXorExpr | binaryAndExpr
binaryAndExpr ::= bitShiftExpr "&" binaryAndExpr | bitShiftExpr
bitShiftExpr ::= additionExpr bitShiftOperator bitShiftExpr | additionExpr
bitShiftOperator ::= "<<" | ">>"
additionExpr ::= multiplyExpr additionOperator additionExpr | multiplyExpr
additionOperator ::= "+" | "-" | "++" | "+%" | "-%"
multiplyExpr ::= curlySuffixExpr multiplyOperator multiplyExpr | curlySuffixExpr
curlySuffixExpr ::= typeExpr containerInitExpr?
multiplyOperator ::= "||" | STAR_SYM | "/" | "%" | "**" | "*%"
prefixOpExpr ::= prefixOp errorSetExpr | suffixOpExpr

suffixOpExpr ::=
   (ASYNC_KEYWORD (LEFT_PAREN expr RIGHT_PAREN)? primaryExpr fnCallExpr)
 | primaryExpr (fnCallExpr | arrayAccessExpr | fieldAccessExpr | sliceExpr)?

fieldAccessExpr ::= DOT_SYM symbol
fnCallExpr ::= LEFT_PAREN expr (COMMA_SYM expr)* RIGHT_PAREN
arrayAccessExpr ::= LEFT_BRACKET expr RIGHT_BRACKET
sliceExpr ::= LEFT_BRACKET expr SLICE_SYM expr? RIGHT_BRACKET
containerInitExpr ::= LEFT_BRACE containerInitBody? RIGHT_BRACE

containerInitBody ::=
   structLiteralField (COMMA_SYM structLiteralField)*
 | expr (COMMA_SYM expr)*

structLiteralField ::= DOT_SYM symbol EQ_SYM expr

prefixOp ::=
   "!"
 | "-"
 | "~"
 | STAR_SYM
 | "&"
  (
   ALIGN_KEYWORD LEFT_PAREN
   expr (COLON_SYM integer COLON_SYM integer)? RIGHT_PAREN
  )? CONST_KEYWORD? VOLATILE_KEYWORD?
 | "?"
 | "??"
 | "-%"
 | TRY_KEYWORD
 | AWAIT_KEYWORD

primaryExpr ::=
   integer
 | float
 | string
 | char
 | keywordLiteral
 | boolean
 | null
 | groupedExpr
 | blockExprBlockOrExpr
 | symbol
 | "@" symbol fnCallExpr
 | arrayType
 | fnProto
 | asmExpr
 | containerDecl
 | (CONTINUE_KEYWORD (COLON_SYM symbol)?)
 | errorSetDecl

arrayType ::=
 LEFT_BRACKET expr? RIGHT_BRACKET
 (ALIGN_KEYWORD LEFT_PAREN expr (COLON_SYM integer COLON_SYM integer)? RIGHT_PAREN)?
 CONST_KEYWORD? VOLATILE_KEYWORD? typeExpr

groupedExpr ::= LEFT_PAREN expr RIGHT_PAREN

integer ::= INT_LITERAL
float ::= FLOAT_LITERAL
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD
null ::= NULL_KEYWORD
char ::= CHAR_LITERAL
keywordLiteral ::=
   UNDEFINED_KEYWORD
 | ERROR_KEYWORD
 | THIS_KEYWORD
 | UNREACHABLE_KEYWORD
 | SUSPEND_KEYWORD

errorSetDecl ::= ERROR_KEYWORD LEFT_BRACE (symbol (COMMA_SYM symbol)*)? RIGHT_BRACE

containerDecl ::= (EXTERN_KEYWORD | PACKED_KEYWORD)?
  (
    STRUCT_KEYWORD groupedExpr?
  | UNION_KEYWORD (ENUM_KEYWORD groupedExpr? | groupedExpr)?
  | ENUM_KEYWORD groupedExpr?
  )
  LEFT_BRACE containerMember* RIGHT_BRACE

