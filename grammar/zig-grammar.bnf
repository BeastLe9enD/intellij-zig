{
  parserClass='org.ziglang.ZigParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Zig'
  psiImplClassSuffix='Impl'
  psiPackage='org.ziglang.psi'
  psiImplPackage='org.ziglang.psi.impl'

  tokenTypeClass='org.ziglang.ZigTokenType'
  elementTypeHolderClass='org.ziglang.psi.ZigTypes'
  elementTypeClass='org.ziglang.ZigElementType'
}

zigFile ::= topLevelItem* EOF

topLevelItem ::= CompTimeExpr(block) | topLevelDecl | testDecl
testDecl ::= TEST_KEYWORD String block
topLevelDecl ::= PUB_KEYWORD? (FnDef | externDecl | globalVarDecl | useDecl)
globalVarDecl ::= EXPORT_KEYWORD? variableDecl ";"
localVarDecl ::= COMPTIME_KEYWORD? variableDecl
variableDecl ::=
 (VAR_KEYWORD | CONST_KEYWORD) Symbol (":" typeExpr)?
 (ALIGN_KEYWORD "(" expr ")")?
 (SECTION_KEYWORD "(" expr ")")? "=" expr

containerMember ::= (containerField | FnDef | globalVarDecl)
containerField ::= Symbol (":" PrefixOpExpr ("=" PrefixOpExpr)?)? ","

useDecl ::= USE_KEYWORD expr ";"

externDecl ::= EXTERN_KEYWORD option(String) (FnProto | variableDecl) ";"

FnProto ::=
 (
   NAKEDCC_KEYWORD
 | STDCALLCC_KEYWORD
 | EXTERN_KEYWORD
 | (ASYNC_KEYWORD ("(" expr ")")?)
 )?
 FN_KEYWORD option(Symbol) ParamDeclList option(ALIGN_KEYWORD "(" expr ")")
 option(SECTION_KEYWORD "(" expr ")") option("!") (typeExpr | VAR_KEYWORD)

FnDef ::= (INLINE_KEYWORD | EXPORT_KEYWORD)? FnProto block

ParamDeclList ::= "(" list(ParamDecl, ",") ")"

ParamDecl ::=
 (NOALIAS_KEYWORD | COMPTIME_KEYWORD)?
 (Symbol ":")?
 (typeExpr | VAR_KEYWORD | "...")

block ::= (Symbol ":")? "{" many(statement) "}"

statement ::= localVarDecl ";" | Defer(block) | Defer(expr) ";" | BlockExpr(block) | expr ";" | ";"

private typeExpr ::= errorSetExpr

errorSetExpr ::= (PrefixOpExpr "!" PrefixOpExpr) | PrefixOpExpr

private blockOrExpr ::= block | expr

expr ::= TryExpr | ReturnExpr | BreakExpr | AssignmentExpr | CancelExpr | ResumeExpr

AsmExpr ::= "asm" option("volatile") "(" String option(AsmOutput) ")"

AsmOutput ::= ":" list(AsmOutputItem, ",") option(AsmInput)

AsmInput ::= ":" list(AsmInputItem, ",") option(AsmClobbers)

AsmOutputItem ::= "[" Symbol "]" String "(" (Symbol | "->" typeExpr) ")"

AsmInputItem ::= "[" Symbol "]" String "(" expr ")"

AsmClobbers ::= ":" list(String, ",")

UnwrapExpr ::= BoolOrExpr (UnwrapNullable | UnwrapError) | BoolOrExpr

UnwrapNullable ::= "??" expr

UnwrapError ::= CATCH_KEYWORD option("|" Symbol "|") expr

AssignmentExpr ::= UnwrapExpr AssignmentOperator UnwrapExpr | UnwrapExpr

AssignmentOperator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "*%=" | "+%=" | "-%="

BlockExpr(body) ::= Block | IfExpr(body) | IfErrorExpr(body) | TestExpr(body) | WhileExpr(body) | ForExpr(body) | SwitchExpr | CompTimeExpr(body) | SuspendExpr(body)

CompTimeExpr(body) ::= "comptime" body

SwitchExpr ::= SWITCH_KEYWORD "(" expr ")" "{" many(SwitchProng) "}"

SwitchProng ::= (list(SwitchItem, ",") | ELSE_KEYWORD) "=>" option("|" option("*") Symbol "|") expr ","

SwitchItem ::= expr | (expr "..." expr)

ForExpr(body) ::=
 (Symbol ":")? INLINE_KEYWORD?
 FOR_KEYWORD "(" expr ")"
  option("|" option("*") Symbol option("," Symbol) "|")
   body
  option(ELSE_KEYWORD BlockExpr(body))

BoolOrExpr ::= BoolAndExpr OR_KEYWORD BoolOrExpr | BoolAndExpr
ReturnExpr ::= RETURN_KEYWORD expr?
TryExpr ::= TRY_KEYWORD expr
AwaitExpr ::= AWAIT_KEYWORD expr
BreakExpr ::= BREAK_KEYWORD option(":" Symbol) option(expr)
CancelExpr ::= CANCEL_KEYWORD expr
ResumeExpr ::= RESUME_KEYWORD expr

Defer(body) ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) body

IfExpr(body) ::= "if" "(" expr ")" body option("else" BlockExpr(body))

SuspendExpr(body) ::= "suspend" option(("|" Symbol "|" body))

IfErrorExpr(body) ::= "if" "(" expr ")" option("|" option("*") Symbol "|") body "else" "|" Symbol "|" BlockExpr(body)

TestExpr(body) ::= "if" "(" expr ")" option("|" option("*") Symbol "|") body option("else" BlockExpr(body))

WhileExpr(body) ::= option(Symbol ":") option("inline") "while" "(" expr ")" option("|" option("*") Symbol "|") option(":" "(" expr ")") body option("else" option("|" Symbol "|") BlockExpr(body))

BoolAndExpr ::= ComparisonExpr "and" BoolAndExpr | ComparisonExpr

ComparisonExpr ::= BinaryOrExpr ComparisonOperator BinaryOrExpr | BinaryOrExpr

ComparisonOperator ::= "==" | "!=" | "<" | ">" | "<=" | ">="

BinaryOrExpr ::= BinaryXorExpr "|" BinaryOrExpr | BinaryXorExpr

BinaryXorExpr ::= BinaryAndExpr "^" BinaryXorExpr | BinaryAndExpr

BinaryAndExpr ::= BitShiftExpr "&" BinaryAndExpr | BitShiftExpr

BitShiftExpr ::= AdditionExpr BitShiftOperator BitShiftExpr | AdditionExpr

BitShiftOperator ::= "<<" | ">>"

AdditionExpr ::= MultiplyExpr AdditionOperator AdditionExpr | MultiplyExpr

AdditionOperator ::= "+" | "-" | "++" | "+%" | "-%"

MultiplyExpr ::= CurlySuffixExpr MultiplyOperator MultiplyExpr | CurlySuffixExpr

CurlySuffixExpr ::= typeExpr option(ContainerInitExpr)

MultiplyOperator ::= "||" | "*" | "/" | "%" | "**" | "*%"

PrefixOpExpr ::= PrefixOp errorSetExpr | SuffixOpExpr

SuffixOpExpr ::= ("async" option("(" expr ")") PrimaryExpr fnCallExpr) | PrimaryExpr option(fnCallExpr | ArrayAccessExpr | FieldAccessExpr | SliceExpr)

FieldAccessExpr ::= "." Symbol

fnCallExpr ::= "(" list(Expr, ",") ")"

ArrayAccessExpr ::= "[" expr "]"

SliceExpr ::= "[" expr ".." option(expr) "]"

ContainerInitExpr ::= "{" ContainerInitBody "}"

ContainerInitBody ::= list(StructLiteralField, ",") | list(Expr, ",")

StructLiteralField ::= "." Symbol "=" expr

PrefixOp ::= "!" | "-" | "~" | "*" | ("&" option("align" "(" expr option(":" Integer ":" Integer) ")" ) option("const") option("volatile")) | "?" | "??" | "-%" | "try" | "await"

PrimaryExpr ::= Integer | Float | String | CharLiteral | KeywordLiteral | GroupedExpr | BlockExpr(blockOrExpr) | Symbol | ("@" Symbol fnCallExpr) | ArrayType | FnProto | AsmExpr | ContainerDecl | ("continue" option(":" Symbol)) | ErrorSetDecl

ArrayType ::= "[" option(expr) "]" option("align" "(" expr option(":" Integer ":" Integer) ")")) option("const") option("volatile") TypeExpr

GroupedExpr ::= "(" expr ")"

KeywordLiteral ::= "true" | "false" | "null" | "undefined" | "error" | "this" | "unreachable" | "suspend"

ErrorSetDecl ::= "error" "{" list(Symbol, ",") "}"

ContainerDecl ::= option("extern" | "packed")
  ("struct" GroupedExpr? | "union" option("enum" option(GroupedExpression) | GroupedExpression) | ("enum" option(GroupedExpression)))
  "{" containerMember* "}"

