{
  parserClass='org.ziglang.ZigParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Zig'
  psiImplClassSuffix='Impl'
  psiPackage='org.ziglang.psi'
  psiImplPackage='org.ziglang.psi.impl'

  extends('.*Expr')=expr

  tokenTypeClass='org.ziglang.ZigTokenType'
  elementTypeHolderClass='org.ziglang.psi.ZigTypes'
  elementTypeClass='org.ziglang.ZigElementType'
}

zigFile ::= topLevelItem*

private endOfLine ::= SEMICOLON_SYM comment?
private comment ::= LINE_COMMENT
symbol ::= SYM
string ::= STR

private topLevelDeclaration ::=
 PUB_KEYWORD?
 (
   fnDeclaration
 | externDeclaration
 | globalVarDeclaration
 | useDeclaration
 )

topLevelItem ::= COMPTIME_KEYWORD block | topLevelDeclaration | testDeclaration
testDeclaration ::= TEST_KEYWORD string block
globalVarDeclaration ::= EXPORT_KEYWORD? variableDeclaration endOfLine
localVarDeclaration ::= COMPTIME_KEYWORD? variableDeclaration
variableDeclaration ::=
 (VAR_KEYWORD | CONST_KEYWORD) symbol (COLON_SYM typeExpr)?
 (ALIGN_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (SECTION_KEYWORD LEFT_PAREN expr RIGHT_PAREN)? EQ_SYM expr

containerField ::= symbol (COLON_SYM prefixOpExpr (EQ_SYM prefixOpExpr)?)? COMMA_SYM
containerMember ::=
 (
   containerField
 | fnDeclaration
 | globalVarDeclaration
 )

useDeclaration ::= USE_KEYWORD expr endOfLine
externDeclaration ::= EXTERN_KEYWORD string? (fnProto | variableDeclaration) endOfLine

fnProto ::=
 (
   NAKEDCC_KEYWORD
 | STDCALLCC_KEYWORD
 | EXTERN_KEYWORD
 | (ASYNC_KEYWORD (LEFT_PAREN expr RIGHT_PAREN)?)
 )?
 FN_KEYWORD symbol? paramDeclarationList (ALIGN_KEYWORD LEFT_PAREN expr RIGHT_PAREN)?
 (SECTION_KEYWORD LEFT_PAREN expr RIGHT_PAREN)? NOT_SYM? (typeExpr | VAR_KEYWORD)

fnDeclaration ::= (INLINE_KEYWORD | EXPORT_KEYWORD)? fnProto block

paramDeclarationList ::= LEFT_PAREN (paramDeclaration (COMMA_SYM paramDeclaration)*)? RIGHT_PAREN

paramDeclaration ::=
 (NOALIAS_KEYWORD | COMPTIME_KEYWORD)?
 (symbol COLON_SYM)?
 (typeExpr | VAR_KEYWORD | RANGE_SYM)

statement ::=
   localVarDeclaration endOfLine
 | deferBlock
 | deferExpr endOfLine
 | blockExprBlock
 | expr? endOfLine

private typeExpr ::= errorSetExpr
private errorSetExpr ::= (prefixOpExpr NOT_SYM prefixOpExpr) | prefixOpExpr

private blockOrExpr ::= block | expr

expr ::= tryExpr | returnExpr | breakExpr | assignExpr | cancelExpr | resumeExpr | awaitExpr
block ::= (symbol COLON_SYM)? LEFT_BRACE statement* RIGHT_BRACE

asmExpr ::= ASM_KEYWORD VOLATILE_KEYWORD? LEFT_PAREN string asmOutput? RIGHT_PAREN
asmOutput ::= COLON_SYM (asmOutputItem (COMMA_SYM asmOutputItem)*)? asmInput?
asmInput ::= COLON_SYM (asmInputItem (COMMA_SYM asmInputItem)*)? asmClobbers?
asmOutputItem ::= LEFT_BRACKET symbol RIGHT_BRACKET string LEFT_PAREN (symbol | SMALL_ARROW_SYM typeExpr) RIGHT_PAREN
asmInputItem ::= LEFT_BRACKET symbol RIGHT_BRACKET string LEFT_PAREN expr RIGHT_PAREN
asmClobbers ::= COLON_SYM (string (COMMA_SYM string)*)?

private unwrapExpr ::= boolOrExpr (unwrapNullable | unwrapError) | boolOrExpr
unwrapNullable ::= VERY_QUESTION_SYM expr
unwrapError ::= CATCH_KEYWORD (SEP_SYM symbol SEP_SYM)? expr

private assignExpr ::= unwrapExpr assignOperator unwrapExpr | unwrapExpr
assignOperator ::=
   EQ_SYM
 | TIMES_ASSIGN_SYM
 | DIV_ASSIGN_SYM
 | MOD_ASSIGN_SYM
 | PLUS_ASSIGN_SYM
 | STAR_ASSIGN_SYM
 | MINUS_ASSIGN_SYM
 | SHL_ASSIGN_SYM
 | SHR_ASSIGN_SYM
 | AND_ASSIGN_SYM
 | EXPONENT_ASSIGN_SYM
 | OR_ASSIGN_SYM
 | STAR_MOD_ASSIGN_SYM
 | PLUS_MOD_ASSIGN_SYM
 | MINUS_MOD_ASSIGN_SYM

//BlockExpr(body) ::= Block | IfExpr(body) | IfErrorExpr(body) | TestExpr(body) | WhileExpr(body) | ForExpr(body) | switchExpr | CompTimeExpr(body) | SuspendExpr(body)
//Bnf泛型编程(雾
blockExprBlock ::=
   block
 | ifExprBlock
 | ifErrorExprBlock
 | testExprBlock
 | whileExprBlock
 | forExprBlock
 | switchExpr
 | compTimeExprBlock
 | suspendExprBlock

blockExprBlockOrExpr ::=
   block
 | ifExprBlockOrExpr
 | ifErrorExprBlockOrExpr
 | testExprBlockOrExpr
 | whileExprBlockOrExpr
 | forExprBlockOrExpr
 | switchExpr
 | compTimeExprBlockOrExpr
 | suspendExprBlockOrExpr

//CompTimeExpr(body) ::= "comptime" body
compTimeExprBlock ::= COMPTIME_KEYWORD block
compTimeExprBlockOrExpr ::= COMPTIME_KEYWORD blockOrExpr

switchExpr ::=
 SWITCH_KEYWORD
  LEFT_PAREN expr RIGHT_PAREN
  LEFT_BRACE switchProng* RIGHT_BRACE
switchItem ::= expr (RANGE_SYM expr)?
switchProng ::=
 (ELSE_KEYWORD | (switchItem (COMMA_SYM switchItem)*)?)
 ARROW_SYM
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
 expr COMMA_SYM

//ForExpr(body) ::=
// (symbol COLON_SYM)? INLINE_KEYWORD?
// FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
//  option(SEP_SYM STAR_SYM? symbol option(COMMA_SYM symbol) SEP_SYM)
//   body
//  option(ELSE_KEYWORD BlockExpr(body))

forExprBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol (COMMA_SYM symbol)? SEP_SYM)?
   block
  (ELSE_KEYWORD blockExprBlock)?

forExprBlockOrExpr ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 FOR_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol (COMMA_SYM symbol)? SEP_SYM)?
   blockOrExpr
  (ELSE_KEYWORD blockExprBlockOrExpr)?

private returnExpr ::= RETURN_KEYWORD expr?
private tryExpr ::= TRY_KEYWORD expr
private awaitExpr ::= AWAIT_KEYWORD expr
private breakExpr ::= BREAK_KEYWORD (COLON_SYM symbol)? expr?
private cancelExpr ::= CANCEL_KEYWORD expr
private resumeExpr ::= RESUME_KEYWORD expr
private deferExpr ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) expr
deferBlock ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) block

//IfExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN body option("else" BlockExpr(body))
ifExprBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  block
 (ELSE_KEYWORD blockExprBlock)?
ifExprBlockOrExpr ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  blockOrExpr
 (ELSE_KEYWORD blockExprBlockOrExpr)?

//SuspendExpr(body) ::= "suspend" option((SEP_SYM symbol SEP_SYM body))
suspendExprBlock ::= SUSPEND_KEYWORD (SEP_SYM symbol SEP_SYM block)?
suspendExprBlockOrExpr ::= SUSPEND_KEYWORD (SEP_SYM symbol SEP_SYM blockOrExpr)?

//IfErrorExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) body "else" SEP_SYM symbol SEP_SYM BlockExpr(body)
ifErrorExprBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  block
 ELSE_KEYWORD SEP_SYM symbol SEP_SYM blockExprBlock
ifErrorExprBlockOrExpr ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  blockOrExpr
 ELSE_KEYWORD SEP_SYM symbol SEP_SYM blockExprBlockOrExpr

//TestExpr(body) ::= "if" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) body option("else" BlockExpr(body))
testExprBlock ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  block
 (ELSE_KEYWORD blockExprBlock)?
testExprBlockOrExpr ::=
 IF_KEYWORD LEFT_PAREN expr RIGHT_PAREN
 (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  blockOrExpr
 (ELSE_KEYWORD blockExprBlockOrExpr)?

//WhileExpr(body) ::= option(symbol COLON_SYM) option("inline") "while" LEFT_PAREN expr RIGHT_PAREN option(SEP_SYM STAR_SYM? symbol SEP_SYM) option(COLON_SYM LEFT_PAREN expr RIGHT_PAREN) body option("else" (SEP_SYM symbol SEP_SYM)? BlockExpr(body))
whileExprBlock ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 WHILE_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  (COLON_SYM LEFT_PAREN expr RIGHT_PAREN)?
   block
  (ELSE_KEYWORD (SEP_SYM symbol SEP_SYM)? blockExprBlock)?

whileExprBlockOrExpr ::=
 (symbol COLON_SYM)? INLINE_KEYWORD?
 WHILE_KEYWORD LEFT_PAREN expr RIGHT_PAREN
  (SEP_SYM STAR_SYM? symbol SEP_SYM)?
  (COLON_SYM LEFT_PAREN expr RIGHT_PAREN)?
   blockOrExpr
  (ELSE_KEYWORD (SEP_SYM symbol SEP_SYM)? blockExprBlockOrExpr)?

private boolOrExpr ::= boolAndExpr OR_KEYWORD boolOrExpr | boolAndExpr
private boolAndExpr ::= comparisonExpr AND_KEYWORD boolAndExpr | comparisonExpr
private comparisonExpr ::= binaryOrExpr comparisonOperator binaryOrExpr | binaryOrExpr
private binaryOrExpr ::= binaryXorExpr SEP_SYM binaryOrExpr | binaryXorExpr
private binaryXorExpr ::= binaryAndExpr EXPONENT_SYM binaryXorExpr | binaryAndExpr
private binaryAndExpr ::= bitShiftExpr AND_SYM binaryAndExpr | bitShiftExpr
private bitShiftExpr ::= additionExpr bitShiftOperator bitShiftExpr | additionExpr
private additionExpr ::= multiplyExpr additionOperator additionExpr | multiplyExpr
private multiplyExpr ::= curlySuffixExpr multiplyOperator multiplyExpr | curlySuffixExpr
private curlySuffixExpr ::= typeExpr containerInitExpr?
private prefixOpExpr ::= prefixOp errorSetExpr | suffixOpExpr
bitShiftOperator ::= SHL_SYM | SHR_SYM
additionOperator ::= PLUS_SYM | MINUS_SYM | INC_SYM | PLUS_MOD_SYM | MINUS_MOD_SYM
multiplyOperator ::= SEP_SEP_SYM | STAR_SYM | DIV_SYM | MOD_SYM | STAR_STAR_SYM | STAR_MOD_SYM
comparisonOperator ::=
   EQUAL_SYM
 | UNEQUAL_SYM
 | LT_SYM
 | GT_SYM
 | LE_SYM
 | GE_SYM

private suffixOpExpr ::=
   (ASYNC_KEYWORD (LEFT_PAREN expr RIGHT_PAREN)? primaryExpr fnCallExpr)
 | primaryExpr (fnCallExpr | arrayAccessExpr | fieldAccessExpr | sliceExpr)?

private fieldAccessExpr ::= DOT_SYM symbol
private fnCallExpr ::= LEFT_PAREN (expr (COMMA_SYM expr)*)? RIGHT_PAREN
private arrayAccessExpr ::= LEFT_BRACKET expr RIGHT_BRACKET
private sliceExpr ::= LEFT_BRACKET expr SLICE_SYM expr? RIGHT_BRACKET
private containerInitExpr ::= LEFT_BRACE containerInitBody? RIGHT_BRACE

containerInitBody ::=
   structLiteralField (COMMA_SYM structLiteralField)*
 | expr (COMMA_SYM expr)*

structLiteralField ::= DOT_SYM symbol EQ_SYM expr

prefixOp ::=
   NOT_SYM
 | MINUS
 | BITWISE_NOT_SYM
 | STAR_SYM
 | AND_SYM
  (
   ALIGN_KEYWORD LEFT_PAREN
   expr (COLON_SYM integer COLON_SYM integer)? RIGHT_PAREN
  )? CONST_KEYWORD? VOLATILE_KEYWORD?
 | QUESTION_SYM
 | VERY_QUESTION_SYM
 | MINUS_MOD_SYM
 | TRY_KEYWORD
 | AWAIT_KEYWORD

private primaryExpr ::=
   integer
 | float
 | string
 | char
 | keywordLiteral
 | boolean
 | null
 | blockExprBlockOrExpr
 | symbol
 | macroCall
 | arrayType
 | fnProto
 | asmExpr
 | containerDeclaration
 | CONTINUE_KEYWORD (COLON_SYM symbol)?
 | errorSetDeclaration
 | groupedExpr

macroCall ::= AT_SYM symbol fnCallExpr

arrayType ::=
 LEFT_BRACKET expr? RIGHT_BRACKET
 (ALIGN_KEYWORD LEFT_PAREN expr (COLON_SYM integer COLON_SYM integer)? RIGHT_PAREN)?
 CONST_KEYWORD? VOLATILE_KEYWORD? typeExpr

groupedExpr ::= LEFT_PAREN expr RIGHT_PAREN

integer ::= INT_LITERAL
float ::= FLOAT_LITERAL
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD
null ::= NULL_KEYWORD
char ::= CHAR_LITERAL
keywordLiteral ::=
   UNDEFINED_KEYWORD
 | ERROR_KEYWORD
 | THIS_KEYWORD
 | UNREACHABLE_KEYWORD
 | SUSPEND_KEYWORD

errorSetDeclaration ::=
 ERROR_KEYWORD
 LEFT_BRACE (symbol (COMMA_SYM symbol)*)? RIGHT_BRACE

containerDeclaration ::=
 (EXTERN_KEYWORD | PACKED_KEYWORD)?
 (
   STRUCT_KEYWORD groupedExpr?
 | UNION_KEYWORD (ENUM_KEYWORD groupedExpr? | groupedExpr)?
 | ENUM_KEYWORD groupedExpr?
 )
 LEFT_BRACE containerMember* RIGHT_BRACE

