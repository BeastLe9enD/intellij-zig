{
  parserClass='org.ziglang.ZigParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Zig'
  psiImplClassSuffix='Impl'
  psiPackage='org.ziglang.psi'
  psiImplPackage='org.ziglang.psi.impl'

  tokenTypeClass='org.ziglang.ZigTokenType'
  elementTypeHolderClass='org.ziglang.psi.ZigTypes'
  elementTypeClass='org.ziglang.ZigElementType'
}

zigFile ::= topLevelItem* EOF

topLevelItem ::= CompTimeExpr(block) | topLevelDecl | testDecl
testDecl ::= TEST_KEYWORD String block
topLevelDecl ::= PUB_KEYWORD? (fnDef | externDecl | globalVarDecl | useDecl)
globalVarDecl ::= EXPORT_KEYWORD? variableDecl ";"
localVarDecl ::= COMPTIME_KEYWORD? variableDecl
variableDecl ::=
 (VAR_KEYWORD | CONST_KEYWORD) Symbol (":" typeExpr)?
 (ALIGN_KEYWORD "(" expr ")")?
 (SECTION_KEYWORD "(" expr ")")? "=" expr

containerMember ::= (containerField | fnDef | globalVarDecl)
containerField ::= Symbol (":" PrefixOpExpr ("=" PrefixOpExpr)?)? ","

useDecl ::= USE_KEYWORD expr ";"

externDecl ::= EXTERN_KEYWORD option(String) (fnProto | variableDecl) ";"

fnProto ::=
 (
   NAKEDCC_KEYWORD
 | STDCALLCC_KEYWORD
 | EXTERN_KEYWORD
 | (ASYNC_KEYWORD ("(" expr ")")?)
 )?
 FN_KEYWORD option(Symbol) paramDeclList option(ALIGN_KEYWORD "(" expr ")")
 option(SECTION_KEYWORD "(" expr ")") option("!") (typeExpr | VAR_KEYWORD)

fnDef ::= (INLINE_KEYWORD | EXPORT_KEYWORD)? fnProto block

paramDeclList ::= "(" list(paramDecl, ",") ")"

paramDecl ::=
 (NOALIAS_KEYWORD | COMPTIME_KEYWORD)?
 (Symbol ":")?
 (typeExpr | VAR_KEYWORD | "...")

block ::= (Symbol ":")? "{" many(statement) "}"

statement ::= localVarDecl ";" | Defer(block) | Defer(expr) ";" | BlockExpr(block) | expr ";" | ";"

private typeExpr ::= errorSetExpr

errorSetExpr ::= (PrefixOpExpr "!" PrefixOpExpr) | PrefixOpExpr

private blockOrExpr ::= block | expr

expr ::= TryExpr | ReturnExpr | BreakExpr | AssignmentExpr | CancelExpr | ResumeExpr

asmExpr ::= "asm" option("volatile") "(" String option(asmOutput) ")"

asmOutput ::= ":" list(asmOutputItem, ",") option(asmInput)

asmInput ::= ":" list(asmInputItem, ",") option(asmClobbers)

asmOutputItem ::= "[" Symbol "]" String "(" (Symbol | "->" typeExpr) ")"

asmInputItem ::= "[" Symbol "]" String "(" expr ")"

asmClobbers ::= ":" list(String, ",")

UnwrapExpr ::= BoolOrExpr (UnwrapNullable | UnwrapError) | BoolOrExpr

UnwrapNullable ::= "??" expr

UnwrapError ::= CATCH_KEYWORD option("|" Symbol "|") expr

AssignmentExpr ::= UnwrapExpr AssignmentOperator UnwrapExpr | UnwrapExpr

AssignmentOperator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "*%=" | "+%=" | "-%="

BlockExpr(body) ::= Block | IfExpr(body) | IfErrorExpr(body) | TestExpr(body) | WhileExpr(body) | ForExpr(body) | SwitchExpr | CompTimeExpr(body) | SuspendExpr(body)

CompTimeExpr(body) ::= "comptime" body

SwitchExpr ::= SWITCH_KEYWORD "(" expr ")" "{" many(SwitchProng) "}"

SwitchProng ::= (list(SwitchItem, ",") | ELSE_KEYWORD) "=>" option("|" option("*") Symbol "|") expr ","

SwitchItem ::= expr | (expr "..." expr)

ForExpr(body) ::=
 (Symbol ":")? INLINE_KEYWORD?
 FOR_KEYWORD "(" expr ")"
  option("|" option("*") Symbol option("," Symbol) "|")
   body
  option(ELSE_KEYWORD BlockExpr(body))

BoolOrExpr ::= aoolAndExpr OR_KEYWORD BoolOrExpr | aoolAndExpr
ReturnExpr ::= RETURN_KEYWORD expr?
TryExpr ::= TRY_KEYWORD expr
AwaitExpr ::= AWAIT_KEYWORD expr
BreakExpr ::= BREAK_KEYWORD option(":" Symbol) option(expr)
CancelExpr ::= CANCEL_KEYWORD expr
ResumeExpr ::= RESUME_KEYWORD expr

Defer(body) ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) body

IfExpr(body) ::= "if" "(" expr ")" body option("else" BlockExpr(body))

SuspendExpr(body) ::= "suspend" option(("|" Symbol "|" body))

IfErrorExpr(body) ::= "if" "(" expr ")" option("|" option("*") Symbol "|") body "else" "|" Symbol "|" BlockExpr(body)

TestExpr(body) ::= "if" "(" expr ")" option("|" option("*") Symbol "|") body option("else" BlockExpr(body))

WhileExpr(body) ::= option(Symbol ":") option("inline") "while" "(" expr ")" option("|" option("*") Symbol "|") option(":" "(" expr ")") body option("else" option("|" Symbol "|") BlockExpr(body))

aoolAndExpr ::= comparisonExpr "and" aoolAndExpr | comparisonExpr
comparisonExpr ::= binaryOrExpr comparisonOperator binaryOrExpr | binaryOrExpr
comparisonOperator ::= "==" | "!=" | "<" | ">" | "<=" | ">="
binaryOrExpr ::= binaryXorExpr "|" binaryOrExpr | binaryXorExpr
binaryXorExpr ::= binaryAndExpr "^" binaryXorExpr | binaryAndExpr
binaryAndExpr ::= bitShiftExpr "&" binaryAndExpr | bitShiftExpr
bitShiftExpr ::= additionExpr bitShiftOperator bitShiftExpr | additionExpr
bitShiftOperator ::= "<<" | ">>"
additionExpr ::= multiplyExpr additionOperator additionExpr | multiplyExpr
additionOperator ::= "+" | "-" | "++" | "+%" | "-%"
multiplyExpr ::= curlySuffixExpr multiplyOperator multiplyExpr | curlySuffixExpr
curlySuffixExpr ::= typeExpr option(containerInitExpr)
multiplyOperator ::= "||" | "*" | "/" | "%" | "**" | "*%"

PrefixOpExpr ::= PrefixOp errorSetExpr | SuffixOpExpr

SuffixOpExpr ::= ("async" option("(" expr ")") PrimaryExpr fnCallExpr) | PrimaryExpr option(fnCallExpr | ArrayAccessExpr | FieldAccessExpr | SliceExpr)

FieldAccessExpr ::= "." Symbol

fnCallExpr ::= "(" list(Expr, ",") ")"

ArrayAccessExpr ::= "[" expr "]"

SliceExpr ::= "[" expr ".." option(expr) "]"

containerInitExpr ::= "{" containerInitBody "}"

containerInitBody ::= list(structLiteralField, ",") | list(Expr, ",")

structLiteralField ::= "." Symbol "=" expr

PrefixOp ::= "!" | "-" | "~" | "*" | ("&" option("align" "(" expr option(":" Integer ":" Integer) ")" ) option("const") option("volatile")) | "?" | "??" | "-%" | "try" | "await"

PrimaryExpr ::= Integer | Float | String | CharLiteral | KeywordLiteral | GroupedExpr | BlockExpr(blockOrExpr) | Symbol | ("@" Symbol fnCallExpr) | ArrayType | fnProto | asmExpr | containerDecl | ("continue" option(":" Symbol)) | ErrorSetDecl

ArrayType ::= "[" option(expr) "]" option("align" "(" expr option(":" Integer ":" Integer) ")")) option("const") option("volatile") TypeExpr

GroupedExpr ::= "(" expr ")"

KeywordLiteral ::= "true" | "false" | "null" | "undefined" | "error" | "this" | "unreachable" | "suspend"

ErrorSetDecl ::= "error" "{" list(Symbol, ",") "}"

containerDecl ::= option("extern" | "packed")
  ("struct" GroupedExpr? | "union" option("enum" option(GroupedExpression) | GroupedExpression) | ("enum" option(GroupedExpression)))
  "{" containerMember* "}"

