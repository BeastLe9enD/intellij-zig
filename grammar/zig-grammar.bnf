{
  parserClass='org.ziglang.ZigParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Zig'
  psiImplClassSuffix='Impl'
  psiPackage='org.ziglang.psi'
  psiImplPackage='org.ziglang.psi.impl'

  tokenTypeClass='org.ziglang.ZigTokenType'
  elementTypeHolderClass='org.ziglang.psi.ZigTypes'
  elementTypeClass='org.ziglang.ZigElementType'
}

zigFile ::= topLevelItem* EOF

symbol ::= SYM
string ::= STR
topLevelItem ::= COMPTIME_KEYWORD block | topLevelDecl | testDecl
testDecl ::= TEST_KEYWORD string block
topLevelDecl ::= PUB_KEYWORD? (fnDef | externDecl | globalVarDecl | useDecl)
globalVarDecl ::= EXPORT_KEYWORD? variableDecl ";"
localVarDecl ::= COMPTIME_KEYWORD? variableDecl
variableDecl ::=
 (VAR_KEYWORD | CONST_KEYWORD) symbol (":" typeExpr)?
 (ALIGN_KEYWORD "(" expr ")")?
 (SECTION_KEYWORD "(" expr ")")? "=" expr

containerMember ::= (containerField | fnDef | globalVarDecl)
containerField ::= symbol (":" prefixOpExpr ("=" prefixOpExpr)?)? COMMA_SYM

useDecl ::= USE_KEYWORD expr ";"

externDecl ::= EXTERN_KEYWORD string? (fnProto | variableDecl) ";"

fnProto ::=
 (
   NAKEDCC_KEYWORD
 | STDCALLCC_KEYWORD
 | EXTERN_KEYWORD
 | (ASYNC_KEYWORD ("(" expr ")")?)
 )?
 FN_KEYWORD symbol? paramDeclList (ALIGN_KEYWORD "(" expr ")")?
 (SECTION_KEYWORD "(" expr ")")? "!"? (typeExpr | VAR_KEYWORD)

fnDef ::= (INLINE_KEYWORD | EXPORT_KEYWORD)? fnProto block

paramDeclList ::= "(" (paramDecl (COMMA_SYM paramDecl)*)? ")"

paramDecl ::=
 (NOALIAS_KEYWORD | COMPTIME_KEYWORD)?
 (symbol ":")?
 (typeExpr | VAR_KEYWORD | "...")

statement ::=
   localVarDecl ";"
 | deferblock
 | deferExpr ";"
 | blockExpr(block)
 | expr? ";"

private typeExpr ::= errorSetExpr
errorSetExpr ::= (prefixOpExpr "!" prefixOpExpr) | prefixOpExpr

private blockOrExpr ::= block | expr
expr ::= tryExpr | returnExpr | breakExpr | assignExpr | cancelExpr | resumeExpr
block ::= (symbol ":")? "{" statement* "}"

asmExpr ::= ASM_KEYWORD VOLATILE_KEYWORD? "(" string asmOutput? ")"
asmOutput ::= ":" (asmOutputItem (COMMA_SYM asmOutputItem)*)? asmInput?
asmInput ::= ":" (asmInputItem (COMMA_SYM asmInputItem)*)? asmClobbers?
asmOutputItem ::= "[" symbol "]" string "(" (symbol | "->" typeExpr) ")"
asmInputItem ::= "[" symbol "]" string "(" expr ")"
asmClobbers ::= ":" (string (COMMA_SYM string)*)?

unwrapExpr ::= boolOrExpr (unwrapNullable | unwrapError) | boolOrExpr
unwrapNullable ::= "??" expr
unwrapError ::= CATCH_KEYWORD ("|" symbol "|")? expr

assignExpr ::= unwrapExpr assignOperator unwrapExpr | unwrapExpr
assignOperator ::= "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | "&=" | "^=" | "|=" | "*%=" | "+%=" | "-%="

//BlockExpr(body) ::= Block | IfExpr(body) | IfErrorExpr(body) | TestExpr(body) | WhileExpr(body) | ForExpr(body) | switchExpr | CompTimeExpr(body) | SuspendExpr(body)
//Bnf泛型编程(雾
blockExprBlock ::=
  block
  | ifExprBlock
  | ifErrorExprBlock
  | testExprBlock
  | whileExprBlock
  | forExprBlock
  | switchExpr
  | compTimeExprBlock
  | suspendExprBlock

blockExprBlockOrExpr ::=
  block
  | ifExprBlockOrExpr
  | ifErrorExprBlockOrExpr
  | testExprBlockOrExpr
  | whileExprBlockOrExpr
  | forExprBlockOrExpr
  | switchExpr
  | CompTimeExprBlockOrExpr
  | suspendExprBlockOrExpr

//CompTimeExpr(body) ::= "comptime" body
compTimeExprBlock ::= "comptime" block
CompTimeExprBlockOrExpr ::= "comptime" blockOrExpr

switchExpr ::= SWITCH_KEYWORD "(" expr ")" "{" switchProng* "}"
switchItem ::= expr | (expr "..." expr)
switchProng ::=
 (switchItem (COMMA_SYM switchItem) | ELSE_KEYWORD)
 "=>"
 ("|" "*"? symbol "|")?
 expr ","


//ForExpr(body) ::=
// (symbol ":")? INLINE_KEYWORD?
// FOR_KEYWORD "(" expr ")"
//  option("|" "*"? symbol option("," symbol) "|")
//   body
//  option(ELSE_KEYWORD BlockExpr(body))

forExprBlock ::=
 (symbol ":")? INLINE_KEYWORD?
 FOR_KEYWORD "(" expr ")"
  ("|" "*"? symbol ("," symbol)? "|")?
   block
  (ELSE_KEYWORD blockExprBlock)?
forExprBlockOrExpr ::=
 (symbol ":")? INLINE_KEYWORD?
 FOR_KEYWORD "(" expr ")"
  ("|" "*"? symbol ("," symbol)? "|")?
   blockOrExpr
  (ELSE_KEYWORD blockExprBlockOrExpr)?

boolOrExpr ::= aoolAndExpr OR_KEYWORD boolOrExpr | aoolAndExpr
returnExpr ::= RETURN_KEYWORD expr?
tryExpr ::= TRY_KEYWORD expr
awaitExpr ::= AWAIT_KEYWORD expr
breakExpr ::= BREAK_KEYWORD (":" symbol)? expr?
cancelExpr ::= CANCEL_KEYWORD expr
resumeExpr ::= RESUME_KEYWORD expr
deferblock ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) block
deferExpr ::= (DEFER_KEYWORD | DEFERROR_KEYWORD) expr

//IfExpr(body) ::= "if" "(" expr ")" body option("else" BlockExpr(body))
ifExprBlock ::= IF_KEYWORD "(" expr ")" block (ELSE_KEYWORD blockExprBlock)?
ifExprBlockOrExpr ::= IF_KEYWORD "(" expr ")" blockOrExpr (ELSE_KEYWORD blockExprBlockOrExpr)?


//SuspendExpr(body) ::= "suspend" option(("|" symbol "|" body))
suspendExprBlock ::= SUSPEND_KEYWORD ("|" symbol "|" block)?
suspendExprBlockOrExpr ::= SUSPEND_KEYWORD ("|" symbol "|" blockOrExpr)?

//IfErrorExpr(body) ::= "if" "(" expr ")" option("|" "*"? symbol "|") body "else" "|" symbol "|" BlockExpr(body)
ifErrorExprBlock ::= IF_KEYWORD "(" expr ")" ("|" "*"? symbol "|")? block ELSE_KEYWORD "|" symbol "|" blockExprBlock
ifErrorExprBlockOrExpr ::= IF_KEYWORD "(" expr ")" ("|" "*"? symbol "|")? blockOrExpr ELSE_KEYWORD "|" symbol "|" blockExprBlockOrExpr

//TestExpr(body) ::= "if" "(" expr ")" option("|" "*"? symbol "|") body option("else" BlockExpr(body))
testExprBlock ::= IF_KEYWORD "(" expr ")" ("|" "*"? symbol "|")? block (ELSE_KEYWORD blockExprBlock)?
testExprBlockOrExpr ::= IF_KEYWORD "(" expr ")" ("|" "*"? symbol "|")? blockOrExpr (ELSE_KEYWORD blockExprBlockOrExpr)?

//WhileExpr(body) ::= option(symbol ":") option("inline") "while" "(" expr ")" option("|" "*"? symbol "|") option(":" "(" expr ")") body option("else" ("|" symbol "|")? BlockExpr(body))
whileExprBlock ::= (symbol ":")? INLINE_KEYWORD? WHILE_KEYWORD "(" expr ")" ("|" "*"? symbol "|")? (":" "(" expr ")")? block (ELSE_KEYWORD ("|" symbol "|")? blockExprBlock)?
whileExprBlockOrExpr ::= (symbol ":")? INLINE_KEYWORD? WHILE_KEYWORD "(" expr ")" ("|" "*"? symbol "|")? (":" "(" expr ")")? blockOrExpr (ELSE_KEYWORD ("|" symbol "|")? blockExprBlockOrExpr)?

aoolAndExpr ::= comparisonExpr AND_KEYWORD aoolAndExpr | comparisonExpr
comparisonExpr ::= binaryOrExpr comparisonOperator binaryOrExpr | binaryOrExpr
comparisonOperator ::= "==" | "!=" | "<" | ">" | "<=" | ">="
binaryOrExpr ::= binaryXorExpr "|" binaryOrExpr | binaryXorExpr
binaryXorExpr ::= binaryAndExpr "^" binaryXorExpr | binaryAndExpr
binaryAndExpr ::= bitShiftExpr "&" binaryAndExpr | bitShiftExpr
bitShiftExpr ::= additionExpr bitShiftOperator bitShiftExpr | additionExpr
bitShiftOperator ::= "<<" | ">>"
additionExpr ::= multiplyExpr additionOperator additionExpr | multiplyExpr
additionOperator ::= "+" | "-" | "++" | "+%" | "-%"
multiplyExpr ::= curlySuffixExpr multiplyOperator multiplyExpr | curlySuffixExpr
curlySuffixExpr ::= typeExpr containerInitExpr?
multiplyOperator ::= "||" | "*" | "/" | "%" | "**" | "*%"
prefixOpExpr ::= prefixOp errorSetExpr | suffixOpExpr

suffixOpExpr ::=
   (ASYNC_KEYWORD ("(" expr ")")? primaryExpr fnCallExpr)
 | primaryExpr (fnCallExpr | arrayAccessExpr | fieldAccessExpr | sliceExpr)?

fieldAccessExpr ::= "." symbol
fnCallExpr ::= "(" expr (COMMA_SYM expr)* ")"
arrayAccessExpr ::= "[" expr "]"
sliceExpr ::= "[" expr ".." expr? "]"
containerInitExpr ::= "{" containerInitBody? "}"

containerInitBody ::=
   structLiteralField (COMMA_SYM structLiteralField)*
 | expr (COMMA_SYM expr)*

structLiteralField ::= "." symbol "=" expr

prefixOp ::=
   "!"
 | "-"
 | "~"
 | "*"
 | "&" (ALIGN_KEYWORD "(" expr (":" integer ":" integer)? ")" )? CONST_KEYWORD? VOLATILE_KEYWORD?
 | "?"
 | "??"
 | "-%"
 | TRY_KEYWORD
 | AWAIT_KEYWORD

primaryExpr ::=
   integer
 | float
 | string
 | char
 | keywordLiteral
 | boolean
 | null
 | groupedExpr
 | blockExpr(blockOrExpr)
 | symbol
 | "@" symbol fnCallExpr
 | arrayType
 | fnProto
 | asmExpr
 | containerDecl
 | (CONTINUE_KEYWORD (":" symbol)?)
 | errorSetDecl

arrayType ::=
 "[" expr? "]"
 (ALIGN_KEYWORD "(" expr (":" integer ":" integer)? ")")?
 CONST_KEYWORD? VOLATILE_KEYWORD? typeExpr

groupedExpr ::= "(" expr ")"

integer ::= INT_LITERAL
float ::= FLOAT_LITERAL
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD
null ::= NULL_KEYWORD
char ::= CHAR_LITERAL
keywordLiteral ::=
   UNDEFINED_KEYWORD
 | ERROR_KEYWORD
 | THIS_KEYWORD
 | UNREACHABLE_KEYWORD
 | SUSPEND_KEYWORD

errorSetDecl ::= ERROR_KEYWORD "{" (symbol (COMMA_SYM symbol)*)? "}"

containerDecl ::= (EXTERN_KEYWORD | PACKED_KEYWORD)?
  (
    STRUCT_KEYWORD groupedExpr?
  | UNION_KEYWORD (ENUM_KEYWORD groupedExpr? | groupedExpr)?
  | ENUM_KEYWORD groupedExpr?
  )
  "{" containerMember* "}"

